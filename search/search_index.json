{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"auth-profiles/","title":"Auth and Profiles","text":""},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"levels-groups/","title":"Levels and Groups","text":""},{"location":"meeting-points/","title":"Meeting Points","text":""},{"location":"notifications/","title":"Notifications","text":""},{"location":"permissions/","title":"Permissions","text":"<p>This API uses a concept of dynamically defined permissions, which can be edited via the Django Admin interface. This page is intended simply to explain the concept in general terms. Pages focusing on specific features or areas of the API will go into further detail on the specific permissions relevant to those endpoints.</p> <p>The permissions for API endpoints are controlled to some extent by hard-coded logic (e.g. trip lead can edit a trip), but also in many cases through the <code>PermissionMatrix</code> model. This model is intended to be edited only via Django Admin interface, with read-only API endpoints available for clients to determine permissions that apply for an authenticated user.</p> <p>The <code>PermissionMatrix</code> model contains 3 properties as shown below, with subsequent sections explaining purpose of each in more detail: </p>"},{"location":"permissions/#action-required","title":"Action (required)","text":"<p>The <code>action</code> column indicates which permission the entity/row relates to.</p> <p>The full list of <code>ActionChoice</code> options can be fetched via the <code>api/choices/permissionmatrixaction</code> endpoint, but include things like <code>CREATE_TRIP</code>, <code>CREATE_TRIP_WITH_APPROVAL</code> and <code>APPROVE_TRIP</code>.</p>"},{"location":"permissions/#levels-optional","title":"Levels (optional)","text":"<p>The <code>levels</code> column indicates which levels the permission applies to. It is possible to select multiple levels. For trips this would be e.g. the level of that trip, while for upgrade request it would be the level that the applicant is requesting to be upgraded to.</p> <p>If left blank, the permission applies to ALL levels.</p> <p>For some actions the levels field has no effect. In those cases that will be indicated through the name of the <code>action</code> in the Django Admin interface.</p>"},{"location":"permissions/#group-required","title":"Group (required)","text":"<p>The <code>group</code> column indicates which groups the permission applies to. All members of the group will be granted the permission to perform the action for the appropriate levels.</p>"},{"location":"permissions/#usage-in-backend-code","title":"Usage in backend code","text":"<p>The <code>views</code> (endpoints) make use of these permissions mainly via the <code>permission_classes</code> property of a django-rest-framework viewset, e.g. as seen in this example:</p> <pre><code>from api.permissions import CanCreateTripPermission\n\nclass TripCreateView(generics.CreateAPIView):\n    queryset = Trip.objects.all()\n    serializer_class = CreateTripSerializer\n    permission_classes = [CanCreateTripPermission]\n</code></pre>"},{"location":"trips/","title":"Trips","text":""},{"location":"upgrade-requests/","title":"Upgrade Requests","text":""}]}